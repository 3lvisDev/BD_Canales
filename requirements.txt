# Librerías principales
opencv-python

# Para detección de objetos con cvlib (alternativa a YOLOv5 directo con PyTorch)
# cvlib
# tensorflow # O tensorflow-gpu si se tiene GPU y CUDA configurado

# Para detección de objetos con YOLOv5 directo (alternativa a cvlib)
# torch
# torchvision
# torchaudio
# ultralytics # Para YOLOv5, si se carga vía torch.hub.load('ultralytics/yolov5', ...)

# Para alertas sonoras (opcional)
# playsound

# Notas para el usuario:
# 1. Descomente las librerías que planea utilizar.
# 2. Si usa `tensorflow-gpu`, asegúrese de que su sistema tiene los drivers NVIDIA, CUDA Toolkit y cuDNN compatibles.
# 3. `cvlib` depende de `tensorflow`. Si usa `cvlib`, necesitará `tensorflow`.
# 4. `ultralytics` es necesario si carga YOLOv5 usando `torch.hub.load('ultralytics/yolov5', ...)`.
#    Asegúrese de que la versión de `torch` sea compatible con `ultralytics`.
# 5. Instale estas dependencias usando: pip install -r requirements.txt
#    O individualmente: pip install <libreria>
#
# Ejemplo de instalación mínima para cvlib (CPU):
# opencv-python
# cvlib
# tensorflow
#
# Ejemplo de instalación mínima para YOLOv5 con PyTorch (CPU o GPU si está configurada):
# opencv-python
# torch
# torchvision
# torchaudio
# ultralytics (si se usa el repo de ultralytics para cargar el modelo)
#
# Para este proyecto, se recomienda empezar con una de las opciones de detección y luego expandir.
# Opción 1: cvlib (más simple, buena para CPU)
#   - opencv-python
#   - cvlib
#   - tensorflow
#
# Opción 2: PyTorch/YOLOv5 (más potente, mejor con GPU, puede ser más complejo de configurar)
#   - opencv-python
#   - torch
#   - torchvision
#   - torchaudio
#   - ultralytics
#
# Opción 3: Detección de movimiento simple (mínimas dependencias)
#   - opencv-python
